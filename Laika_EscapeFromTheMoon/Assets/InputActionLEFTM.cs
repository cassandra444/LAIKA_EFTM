//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActionLEFTM.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionLEFTM : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionLEFTM()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionLEFTM"",
    ""maps"": [
        {
            ""name"": ""LaikaInput"",
            ""id"": ""8d13e3ed-db4e-4ccc-ac09-108dd8dc77e3"",
            ""actions"": [
                {
                    ""name"": ""Mouvements"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a447668a-41c3-44c1-903b-a82880f58174"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attaque"",
                    ""type"": ""Button"",
                    ""id"": ""8507ef0c-625e-4b46-9615-3305b0758b41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24003216-c94c-4196-aec1-955a12bd38b6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""3327ff72-e615-459d-b6cc-97331ff0e2fa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f9969b2-16e5-49c3-98e9-0504e8c39450"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7bede225-66b9-433d-8b84-4cf41e2605fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c95de0b9-48d0-45e9-9f9b-2eb5d7739de1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f8db735a-3aaa-44b3-91da-77be32d3f409"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7eb1642e-1b51-4f7a-9d0b-5ea9c4b73d05"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attaque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1d1d56d-5d71-47cf-ae36-76e67441731f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attaque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LaikaInput
        m_LaikaInput = asset.FindActionMap("LaikaInput", throwIfNotFound: true);
        m_LaikaInput_Mouvements = m_LaikaInput.FindAction("Mouvements", throwIfNotFound: true);
        m_LaikaInput_Attaque = m_LaikaInput.FindAction("Attaque", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LaikaInput
    private readonly InputActionMap m_LaikaInput;
    private ILaikaInputActions m_LaikaInputActionsCallbackInterface;
    private readonly InputAction m_LaikaInput_Mouvements;
    private readonly InputAction m_LaikaInput_Attaque;
    public struct LaikaInputActions
    {
        private @InputActionLEFTM m_Wrapper;
        public LaikaInputActions(@InputActionLEFTM wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvements => m_Wrapper.m_LaikaInput_Mouvements;
        public InputAction @Attaque => m_Wrapper.m_LaikaInput_Attaque;
        public InputActionMap Get() { return m_Wrapper.m_LaikaInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LaikaInputActions set) { return set.Get(); }
        public void SetCallbacks(ILaikaInputActions instance)
        {
            if (m_Wrapper.m_LaikaInputActionsCallbackInterface != null)
            {
                @Mouvements.started -= m_Wrapper.m_LaikaInputActionsCallbackInterface.OnMouvements;
                @Mouvements.performed -= m_Wrapper.m_LaikaInputActionsCallbackInterface.OnMouvements;
                @Mouvements.canceled -= m_Wrapper.m_LaikaInputActionsCallbackInterface.OnMouvements;
                @Attaque.started -= m_Wrapper.m_LaikaInputActionsCallbackInterface.OnAttaque;
                @Attaque.performed -= m_Wrapper.m_LaikaInputActionsCallbackInterface.OnAttaque;
                @Attaque.canceled -= m_Wrapper.m_LaikaInputActionsCallbackInterface.OnAttaque;
            }
            m_Wrapper.m_LaikaInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouvements.started += instance.OnMouvements;
                @Mouvements.performed += instance.OnMouvements;
                @Mouvements.canceled += instance.OnMouvements;
                @Attaque.started += instance.OnAttaque;
                @Attaque.performed += instance.OnAttaque;
                @Attaque.canceled += instance.OnAttaque;
            }
        }
    }
    public LaikaInputActions @LaikaInput => new LaikaInputActions(this);
    public interface ILaikaInputActions
    {
        void OnMouvements(InputAction.CallbackContext context);
        void OnAttaque(InputAction.CallbackContext context);
    }
}
